" Syntax highlight
syntax on

" Set the color scheme
colorscheme myscheme

" Run in gui mode
if has("gui_running")
	set gfn=Terminus:h11				" set font
	set guioptions-=T					" remove toolbar
	hi Normal guibg=black guifg=gray	" set background to black
endif

" Show line number
set number

" Show statistics
set ruler

" Autoindent
set autoindent	" noautoindent
set tabstop=2
set shiftwidth=4

" To insert space characters whenever the tab key is pressed
set expandtab

" To change all the existing tab characters to match the current tab settings
" Type: :retab

" No comaptibile with vi
set nocompatible

" Highlight the search result
set hlsearch

" Search string during prompting
set incsearch

" Mouse support
set mouse=a

" Folding disable
set nofoldenable

" Set spelling language
set spelllang=en

" Enable showing tab and trail space
"set listchars=tab:→·,trail:·,eol:¶
set listchars=tab:  ,eol:¶
set list

" Detect *.cc file as cpp
autocmd BufNewFile,BufReadPost *.cc set filetype=cpp

" Detect *.uml file as plantuml
autocmd BufNewFile,BufReadPost *.uml set filetype=plantuml

" Map keys for comments
nnoremap <C-C> :call NERDComment(0,"toggle")<C-m>
inoremap <C-C> <esc>:call NERDComment(0,"toggle")<C-m><insert>

" Shortcuts for plugins
map <leader>n :NERDTreeToggle<CR>
map <leader>l :TlistToggle<CR>

" F2 switches paste mode
set pastetoggle=<F2>

" 'd' removes lines, 'c' yanks lines
noremap <del> v"_d
vnoremap <del> "_d
"nnoremap dd "_dd
"vnoremap dd "_dd
"nnoremap d "_d
"vnoremap d "_d
"nnoremap cc dd
"vnoremap cc dd
"nnoremap c d
"vnoremap c d

" --- OmniCppComplete ---
filetype plugin on " enable plugins
" auto close options when exiting insert mode
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
set completeopt=menu,menuone
" -- configs --
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype (i.e. parameters) in popup windowdfd
let OmniCpp_ShowScopeInAbbr = 0
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

" -- ctags --
set tags+=./tags
" STD C++ library
" cd ~/.vim/tags/
"ctags -R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ -f tags_std cpp_src/
set tags+=~/.vim/tags/tags_std

" Show characters which are under 78 right margin
" highlight rightMargin ctermbg=darkgray
" au BufWinEnter * let w:m2=matchadd('rightMargin', '\%>78v.\+', -1)
cnoreabbrev showmargin /\%>80v.\+

" Show trailing spaces
"highlight ExtraWhitespace ctermbg=darkgray
"match ExtraWhitespace /\s\+$/

let g:CCTreeKeyTraceForwardTree = '<C-\>>'
let g:CCTreeKeyTraceReverseTree = '<C-\><'
let g:CCTreeKeyCompressTree = 'zs'     " Compress call-tree
let g:CCTreeKeyDepthPlus = '<C-\>='
let g:CCTreeKeyDepthMinus = '<C-\>-'

" Status line
set laststatus=2
set statusline +=\ %n\ 
set statusline +=%<%F\ 
set statusline +=%m\ 
set statusline +=%=%l
set statusline +=/%L
set statusline +=:%c\  
set statusline +=%P

" Remove Replace mode
function s:ForbidReplace()
	if v:insertmode!=#'i'
		call feedkeys("\<Insert>", "n")
	endif
endfunction
augroup ForbidReplaceMode
	autocmd!
	autocmd InsertEnter  * call s:ForbidReplace()
	autocmd InsertChange * call s:ForbidReplace()
augroup END

" :rmsp removes trailing spaces
function g:StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunction
cnoreabbrev rmsp call g:StripTrailingWhitespaces()

" Cscope - otwiera w tym samym oknie
" Ctrl-\ <opcje cscope>
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR> 
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>  
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>  
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>  
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>  
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>  
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>  

" Cscope - otwiera w nowym oknie horyzontalnie
" Ctrl-space <opcje cscope>
nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

